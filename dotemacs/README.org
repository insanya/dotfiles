#+TITLE: GNU EMACS 27.1 Configuration
#+AUTHOR: Lucas Pereira <insanya@protonmail.com>
#+STARTUP: content

* core
** better-defaults
   #+begin_src emacs-lisp
     (tooltip-mode 0)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode 0)
     (show-paren-mode 1)
     (blink-cursor-mode 1)
     (delete-selection-mode 1)
     (fset 'yes-or-no-p 'y-or-n-p)
     (set-default-coding-systems 'utf-8)
     (global-auto-revert-mode t)

     (setq font-use-system-font t)

     (setq help-window-select t)
     (setq vc-follow-symlinks t)
     (setq create-lockfiles nil)
     (setq indent-tabs-mode nil)
     (setq auto-save-default nil)
     (setq make-backup-files nil)
     (setq inhibit-startup-screen t)
     (setq select-enable-clipboard t)
     (setq confirm-kill-emacs 'yes-or-no-p)
     (setq cursor-in-non-selected-windows nil)
     (setq display-buffer-alist
	   '((".*" (display-buffer-reuse-window display-buffer-same-window))))
     (setq initial-scratch-message
	   ";;
     ;;
     ;; https://github.com/insanya
     ;; 
     ;; 

     ")
   #+end_src

** ui
   #+begin_src emacs-lisp
     (use-package all-the-icons)

     (use-package spacemacs-theme
       :init (load-theme 'spacemacs-dark t)
       :custom
       (spacemacs-theme-org-height nil)
       (spacemacs-theme-org-bold nil))

     (use-package centered-window)
   #+end_src

** load executables
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :init (exec-path-from-shell-initialize))
   #+end_src

** diminish modes
   #+begin_src emacs-lisp
     (use-package diminish)
   #+end_src

** company
   #+begin_src emacs-lisp
     (use-package company
       :diminish
       :init (global-company-mode)
       :custom
       (company-idle-delay .1)
       (company-minimum-prefix-length 2)
       (company-box-doc-enable nil))

     (use-package company-box
       :diminish
       :hook (company-mode . company-box-mode))
   #+end_src

** crux
   #+begin_src emacs-lisp
     (use-package crux
       :bind
       ("C-a" . crux-move-beginning-of-line)
       ("C-k" . crux-smart-kill-line)
       ("C-x C-r" . crux-recentf-find-file)
       ("C-c c d" . crux-duplicate-current-line-or-region)
       ("C-c c D" . crux-delete-file-and-buffer)
       ("C-c c r" . crux-rename-file-and-buffer)
       ("C-c c k" . crux-kill-other-buffers)
       ("C-c c c" . crux-cleanup-buffer-or-region))
   #+end_src

** dired
   #+begin_src emacs-lisp
     (require 'dired-x)
     (setq-default dired-dwim-target t)
     (setq dired-listing-switches "-hlAX --group-directories-first")
   #+end_src

** flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :diminish
       :init (global-flycheck-mode))
   #+end_src

** indentation
   #+begin_src emacs-lisp
     (use-package aggressive-indent
       :diminish
       :hook (prog-mode . aggressive-indent-mode))
   #+end_src

** magit
   #+begin_src emacs-lisp
     (use-package magit
       :bind
       ("C-c m" . magit-status)
       ("C-c d" . magit-diff)
       :custom
       (magit-display-buffer-function
	'magit-display-buffer-same-window-except-diff-v1))

     (use-package git-timemachine)

     (use-package diff-hl
       :init (global-diff-hl-mode))
   #+end_src

** parentheses
** parentheses rainbow
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :diminish
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

** parentheses nav
   #+begin_src emacs-lisp
     (use-package smartparens
       :diminish
       :init
       (smartparens-mode)
       (smartparens-global-mode t)
       :bind
       ("C-M-a" . sp-beginning-of-sexp)
       ("C-M-e" . sp-end-of-sexp)
       ("C-M-b" . sp-backward-sexp)
       ("C-M-f" . sp-forward-sexp)
       ("C-M-n" . sp-next-sexp)
       ("C-M-p" . sp-previous-sexp)
       ("M-<backspace>" . sp-backward-kill-word)
       ("C-<backspace>" . backward-kill-word))
   #+end_src

** projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :diminish
       :init (projectile-global-mode)
       :bind ("C-c p" . projectile-command-map)
       :custom
       (projectile-known-projects-file
        (expand-file-name ".projectile-bookmarks" user-emacs-directory)))
   #+end_src

** recent files
   #+begin_src emacs-lisp
     (use-package recentf
       :diminish
       :init (recentf-mode)
       :custom
       (recentf-save-file (concat user-emacs-directory "recentf"))
       (recentf-max-saved-items 100)
       (recentf-exclude '("COMMIT_MSG" "COMMIT_EDITMSG" "/tmp/" "/ssh:" "/elpa")))
   #+end_src

** selectrum
   #+begin_src emacs-lisp
     (use-package selectrum
       :init (selectrum-mode))

     (use-package selectrum-prescient
       :init
       (selectrum-prescient-mode)
       (prescient-persist-mode))
   #+end_src

** search buffer
   #+begin_src emacs-lisp
     (use-package ctrlf
       :init (ctrlf-mode))
   #+end_src

** shackle
   [[https://depp.brause.cc/shackle/][Shackle Source Website]]
   [[https://github.com/sk8ingdom/.emacs.d/blob/master/general-config/general-plugins.el][Solution Savior (Github Source)!!]]
   Function that needs a rework defined here [[Org]]
   #+begin_src emacs-lisp
     (use-package shackle
       :init
       (shackle-mode)
       :config
       (setq shackle-default-rule nil)
       (setq
        shackle-rules
        '(;; Built-in
          (compilation-mode                   :align below :ratio 0.30)
          ;;("*Calendar*"                       :align below :ratio 10    :select t)
          (" *Deletions*"                     :align below)
          ("*Occur*"                          :align below :ratio 0.20)
          ("*Completions*"                    :align below :ratio 0.20)
          ("*Help*"                           :align below :ratio 0.33  :select t)
          (" *Metahelp*"                      :align below :ratio 0.20  :select t)
          ("*Messages*"                       :align below :ratio 0.20  :select t)
          ("*Warning*"                        :align below :ratio 0.20  :select t)
          ("*Warnings*"                       :align below :ratio 0.20  :select t)
          ("*Backtrace*"                      :align below :ratio 0.20  :select t)
          ("*Compile-Log*"                    :align below :ratio 0.20)
          ("*package update results*"         :align below :ratio 0.20)
          ("*Ediff Control Panel*"            :align below              :select t)
          ("*tex-shell*"                      :align below :ratio 0.20  :select t)
          ("*Dired Log*"                      :align below :ratio 0.20  :select t)
          ("*Register Preview*"               :align below              :select t)
          ("*Process List*"                   :align below :ratio 0.20  :select t)

          ;; Org-mode
          (" *Org todo*"                      :align below :ratio 10    :select t)
          ("CAPTURE.*"              :regexp t :align below :ratio 20)
          ("*Org Links*"                      :align below :ratio 10)
          (" *Agenda Commands*"               :align below)
          ("\\*Org Src.*"           :regexp t :align below :ratio 20    :select t)
          ("*Org Attach*"                     :align below              :select t)
          ("*Org Export Dispatcher*"          :align below              :select t)
          ("*Select Link*"                    :align below              :select t))))
   #+end_src

** treemacs
   #+begin_src emacs-lisp
     (use-package treemacs
       :init
       (defvar treemacs-no-load-time-warnings t)
       :custom
       (treemacs-width 24)
       :bind
       (:map global-map
             ("M-0"       . treemacs-select-window)
             ("C-c t 1"   . treemacs-delete-other-windows)
             ("C-c t t"   . treemacs)
             ("C-c t B"   . treemacs-bookmark)
             ("C-c t C-t" . treemacs-find-file)
             ("C-c t M-t" . treemacs-find-tag)))

     (use-package treemacs-projectile
       :after treemacs projectile)

     (use-package treemacs-magit
       :after treemacs magit)
   #+end_src

** yasnippets
   #+begin_src emacs-lisp
     (use-package yasnippet
       :diminish
       :init (yas-global-mode)
       :config (diminish 'yas-minor-mode))

     (use-package yasnippet-snippets
       :diminish)
   #+end_src


* lsp
** core
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :preface
       (defun me/lsp-optimize ()
	 (setq-local
	  gc-cons-threshold (* 100 1024 1024)
	  read-process-output-max (* 1024 1024)))
       :hook
       (lsp-mode . me/lsp-optimize)
       (lsp-mode . lsp-enable-which-key-integration)
       :commands lsp
       :bind-keymap ("C-c l" . lsp-command-map)
       :custom
       (lsp-idle-delay .01)
       (lsp-auto-guess-root t)
       (lsp-session-file (expand-file-name ".lsp" user-emacs-directory)))
   #+end_src

** ui
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :hook (lsp-mode . lsp-ui-mode)
       :custom
       (lsp-ui-doc-enable nil)
       (lsp-ui-sideline-ignore-duplicate t)
       (lsp-ui-sideline-enable nil)
       (lsp-ui-flycheck-enable t)
       (lsp-ui-flycheck-list-position 'right)
       (lsp-ui-flycheck-live-reporting t)
       (lsp-ui-peek-enable t)
       (lsp-ui-peek-list-width 60)
       (lsp-ui-peek-peek-height 25))
   #+end_src

** lsp-treemacs
   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :init (lsp-treemacs-sync-mode)
       :commands lsp-treemacs-errors-list)
   #+end_src


* langs
** c/c++
   #+begin_src emacs-lisp
     (add-hook 'c-mode-hook 'lsp-mode-hook)
     (add-hook 'c++-mode-hook 'lsp-mode-hook)
   #+end_src
   
** haskell
   #+begin_src emacs-lisp
   (use-package haskell-mode)
   #+end_src

** js
   #+begin_src emacs-lisp
     (setq js-indent-level 2)
   #+end_src

** json
   #+begin_src emacs-lisp
     (use-package json-mode)
   #+end_src

** latex
   #+begin_src emacs-lisp
     (use-package auctex
       :hook
       (LaTeX-mode . visual-line-mode)
       (LaTeX-mode . flyspell-mode)
       (LaTeX-mode . LaTeX-math-mode)
       (LaTeX-mode . turn-on-reftex)
       (LaTeX-mode . lsp)
       (bibtex-mode . lsp)
       :custom
       (TeX-auto-save t)
       (TeX-parse-self t)
       (TeX-master nil)
       (TeX-PDF-mode t)
       (reftex-plug-into-AUCTeX t))
   #+end_src

** web-mode
   #+begin_src emacs-lisp
     (use-package web-mode
       :hook (web-mode . lsp)
       :mode ("\\.html?\\'" "\\.css?\\'" "\\.vue\\'")
       :custom
       (web-mode-markup-indent-offset 2)
       (web-mode-css-indent-offset 2)
       (web-mode-code-indent-offset 2))
   #+end_src


* org
** core
   #+begin_src emacs-lisp
     (use-package org
       :bind
       (("C-c o c" . org-capture)
	("C-c o l" . org-store-link)
	("C-c o j" . org-goto-calendar)
	("C-c o k" . org-date-from-calendar))
       :custom
       (org-directory "~/Desktop/insanya/org")
       (org-src-fontify-natively t)
       (org-confirm-babel-evaluate nil)
       (org-startup-with-inline-images t)
       (org-agenda-files (list org-directory))
       (org-agenda-window-setup 'current-window)
       (org-agenda-time-grid '((daily today require-timed) () "......" ""))
       (org-agenda-include-deadlines t)
       (org-agenda-block-separator nil)
       (org-agenda-compact-blocks t)
       (org-todo-keywords
	'((sequence "TODO(t)" "WORKING(s)" "WAITING(w)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))
       (org-todo-keyword-faces '(("WORKING" . "purple")
				 ("WAITING" . "yellow")
				 ("MEETING" . "orange")
				 ("CANCELED" . "black")))
       (org-capture-templates
	'(("t" "Task" entry (file+headline "~/Desktop/insanya/org/sched.org" "Tasks")
	   "** TODO %?\n%T \n")
	  ("m" "Meeting" entry (file+headline "~/Desktop/insanya/org/sched.org" "Meetings")
	   "** MEETING %?\n%T \n")
	  ("p" "Personal" entry (file+headline "~/Desktop/insanya/org/sched.org" "Personal")
	   "** TODO %?\n%T \n :Personal:")))
       :config
       (defun org-super-agenda-insa-view ()
	 (interactive)
	 (org-agenda nil "i"))
       (global-set-key (kbd "C-c o a") 'org-super-agenda-insa-view)
       (defun org-switch-to-buffer-other-window (args)
	 (switch-to-buffer-other-window args))
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((sql . t))))

     (use-package org-bullets
       :diminish
       :hook (org-mode . org-bullets-mode)
       :custom (org-bullets-bullet-list '("■" "◆" "▲" "▶")))
   #+end_src

** super agenda
   #+begin_src emacs-lisp
     (use-package org-super-agenda
       :diminish
       :init (org-super-agenda-mode t)
       :custom
       (org-agenda-custom-commands
        (list(quote
              ("i" "Super Insa View"
               (
                (agenda "" ((org-agenda-span 'day)
                            (org-agenda-property-position 'where-it-fits)
                            (org-agenda-property-separator "|" )
                            (org-super-agenda-groups
                             '((:name "Today" :time-grid t :date today :todo "TODAY" :scheduled today :order 1)
                               (:name "Overdue" :deadline past :order 3)
                               (:name "Due Soon" :deadline future :order 4)))))
                (alltodo "insa" ((org-agenda-overriding-header "")
                                 (org-agenda-property-position 'where-it-fits)
                                 (org-agenda-property-separator "|" )
                                 (org-super-agenda-groups
                                  '((:name "Working On" :todo "WORKING" :order 0)
                                    (:name "Waiting" :todo "WAITING" :order 1)
                                    (:name "Issues" :tag "Issue" :order 4)
                                    (:name "Meetings" :todo "MEETING" :order 6)
                                    (:name "Dissertation" :tag "THESIS" :order 8)
                                    (:name "PEI" :tag "PEI" :order 10)
                                    (:name "Overall" :todo "TODO" :order 12)))))))))))
   #+end_src

