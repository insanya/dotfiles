#+TITLE: GNU EMACS 27.1 Configuration
#+AUTHOR: Lucas Pereira <insanya@protonmail.com>
#+STARTUP: content

* Interface
** Theme

   #+begin_src emacs-lisp
     ;; (use-package color-theme-sanityinc-tomorrow)
     ;; (use-package gruvbox-theme)
     (use-package sublime-themes)
     (load-theme 'graham t)

     (use-package all-the-icons)
     (use-package powerline :config (powerline-default-theme))
   #+end_src

** Font

   #+begin_src emacs-lisp
     (defun insanya/get-default-font ()
       (eq system-type 'gnu/linux) "Ubuntu Mono-12")

     (add-to-list 'default-frame-alist `(font . ,(insanya/get-default-font)))

     (when (display-graphic-p)
       (set-face-attribute 'fixed-pitch nil :font (insanya/get-default-font)))
   #+end_src

** Better Defaults

   #+begin_src emacs-lisp
     (setq-default frame-title-format '("EMACS" "@" user-login-name)
                   confirm-kill-emacs 'yes-or-no-p
                   mouse-yank-at-point t
                   show-help-function nil
                   cursor-in-non-selected-windows t
                   fill-column 80
                   help-window-select t
                   indent-tabs-mode nil
                   inhibit-startup-screen t
                   scroll-conservatively most-positive-fixnum
                   select-enable-clipboard t
                   tab-width 2
                   user-full-name "Lucas Pereira"
                   user-mail-address "insanya@protonmail.com"
                   vc-follow-symlinks t
                   view-read-only t)

     (delete-selection-mode 1)
     (fset 'yes-or-no-p 'y-or-n-p)
     (set-default-coding-systems 'utf-8)
     (blink-cursor-mode 0)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (display-time-mode 1)
     (global-hl-line-mode)
     (show-paren-mode 1)
     (global-linum-mode 1)
     (winner-mode 1)

     (global-set-key [remap kill-buffer] #'kill-this-buffer)
     (global-set-key (kbd "C-z") nil)
     (global-set-key (kbd "M-z") nil)
     (global-set-key (kbd "C-x C-z") nil)

     (global-set-key (kbd "<f8>")
                     (lambda()
                       (interactive)
                       (find-file "~/.emacs.d/README.org")))

     (setq backup-directory-alist
           `(("." . ,(concat user-emacs-directory "backups"))))

     (setq backup-by-copying t
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)
   #+end_src

** Diminish Mode

   #+begin_src emacs-lisp
     (use-package diminish)
   #+end_src

** Load Proper Exec Path

   [[https://github.com/purcell/exec-path-from-shell][Github Source]]
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :init
       (exec-path-from-shell-initialize)
       :custom
       (exec-path-from-shell-check-startup-files nil))
   #+end_src

** Authentication

   Need to implement some secrets.


* Utilities
** Indent Improvements
*** Options

    #+begin_src emacs-lisp
      (electric-indent-mode +1)
    #+end_src

*** Agressive Indent

     [[https://github.com/Malabarba/aggressive-indent-mode][Github Source]]
     #+begin_src emacs-lisp
       (use-package aggressive-indent
         :defer t
         :init
         (aggressive-indent-global-mode)
         :custom
         (aggressive-indent-comments-too))
     #+end_src

** Buffers/Windows
*** IBuffer

    [[https://github.com/purcell/ibuffer-projectile][Github Source 1]]
    [[https://github.com/purcell/ibuffer-vc][Github Source 2]]
    #+begin_src emacs-lisp
      (use-package ibuffer-vc
        :defer t)

      (use-package ibuffer-projectile
        :preface
        (defun ibuffer-set-up-preferred-filters ()
          (ibuffer-vc-set-filter-groups-by-vc-root)
          (unless (eq ibuffer-sorting-mode 'filename/process)
            (ibuffer-do-sort-by-filename/process)))
        :hook
        (ibuffer . ibuffer-set-up-preferred-filters)
        :bind
        ("C-x C-b" . ibuffer)
        :config
        (setq-default ibuffer-show-empty-filter-groups nil))

      (with-eval-after-load 'ibuffer
        (define-ibuffer-column size-h
          (:name "Size" :inline t)
          (file-size-human-readable (buffer-size))))

      (setq ibuffer-formats
            '((mark modified read-only vc-status-mini " "
                    (name 22 22 :left :elide)
                    " "
                    (size-h 9 -1 :right)
                    " "
                    (mode 12 12 :left :elide)
                    " "
                    vc-relative-file)
              (mark modified read-only vc-status-mini " "
                    (name 22 22 :left :elide)
                    " "
                    (size-h 9 -1 :right)
                    " "
                    (mode 14 14 :left :elide)
                    " "
                    (vc-status 12 12 :left)
                    " "
                    vc-relative-file)))
    #+end_src

*** Switch Window
    [[https://github.com/dimitri/switch-window][Github Source]]
    #+begin_src emacs-lisp
      (use-package switch-window
        :bind
        ("C-x o" . switch-window)
        ("C-x 1" . switch-window-then-maximize)
        ("C-x 2" . switch-window-then-split-below)
        ("C-x 3" . switch-window-then-split-right)
        ("C-x 0" . switch-window-then-delete)

        ("C-x 4 d" . switch-window-then-dired)
        ("C-x 4 f" . switch-window-then-find-file)
        ("C-x 4 r" . switch-window-then-find-file-read-only)
        :config
        (setq-default switch-window-shortcut-style 'alphabet
                      switch-window-timeout nil))
    #+end_src

** Break Lines

   [[https://github.com/purcell/page-break-lines][Github Source]]
   #+begin_src emacs-lisp
     (use-package page-break-lines
       :diminish)
   #+end_src

** Browser Setup

   #+begin_src emacs-lisp
     (use-package browse-url
       :custom
       (browse-url-browser-function 'browse-url-generic)
       (browse-url-generic-program "firefox-developer"))
   #+end_src

** Code Completion

   [[https://company-mode.github.io/][Company Mode Website]]
   #+begin_src emacs-lisp
     (use-package company
       :init
       (global-company-mode)
       :diminish "Company"
       :bind
       (:map company-active-map
             ("RET" . nil)
             ([return] . nil)
             ("TAB" . company-complete-selection)
             ([tab] . company-complete-selection)
             ("<right>" . company-complete-common))
       :custom
       (company-dabbrev-downcase nil)
       (company-idle-delay .1)
       (company-minimum-prefix-length 2)
       (company-require-match nil)
       (company-tooltip-align-annotations t))

     (use-package company-box
       :diminish
       :hook
       (company-mode . company-box-mode))
   #+end_src

** Crux

   [[https://github.com/bbatsov/crux][Crux Github Source]]
   #+begin_src emacs-lisp
     (use-package crux
       :bind
       ("C-a" . crux-move-beginning-of-line)
       ;;("C-k" . crux-smart-kill-line)
       ("C-<backspace>" . crux-kill-line-backwards)
       ("C-c c D" . crux-delete-file-and-buffer)
       ("C-c c d" . crux-duplicate-current-line-or-region)
       ("C-c c r". crux-rename-file-and-buffer)
       ("C-c c t". crux-visit-term-buffer)
       ("C-c c k". crux-kill-other-buffers)
       ("C-c c c". crux-cleanup-buffer-or-region)
       ("C-x C-l". crux-downcase-region)
       ("C-x C-u". crux-upcase-region))
   #+end_src

** Dired

   #+begin_src emacs-lisp
     (put 'dired-find-alternate-file 'disabled nil)
   #+end_src

** Expand
*** Emmet Mode

    [[https://emmet.io/][Emmet Website]]
    #+begin_src emacs-lisp
      (use-package emmet-mode
        :bind
        (:map
         emmet-mode-keymap
         ("<C-return>" . nil))
        :custom
        (emmet-insert-flash-time .1)
        (emmet-move-cursor-between-quote t))
    #+end_src

*** YaSnippets

    #+begin_src emacs-lisp
      (use-package yasnippet
        :defer t
        :init
        (yas-global-mode)
        :diminish "YaS")

      (use-package yasnippet-snippets
        :defer t
        :diminish)
    #+end_src

** Ivy/Counsel/Swiper

   [[https://github.com/abo-abo/swiper][Github Source]]
   #+begin_src emacs-lisp
     (use-package counsel
       :diminish
       :bind
       ("C-x C-d" . counsel-dired-jump)
       ("C-x C-r" . counsel-buffer-or-recentf)
       ("C-x C-z" . counsel-ag)
       ("M-x" . counsel-M-x)
       :config (counsel-mode))
   #+end_src

   #+begin_src emacs-lisp
     (use-package ivy
       :init
       (ivy-mode 1)
       :diminish
       :bind
       ("C-x b" . ivy-switch-buffer)
       (:map ivy-minibuffer-map
             ("C-r" . ivy-previous-line-or-history)
             ("M-RET" . ivy-immediate-done))
       :custom
       (ivy-use-virtual-buffers t)
       (ivy-height 10)
       (ivy-on-del-error-function nil)
       (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
       (ivy-wrap t))
   #+end_src

   #+begin_src emacs-lisp
     (use-package swiper
       :bind
       ("C-s" . swiper))
   #+end_src

** Magit

   [[https://magit.vc/][Magit Website]]
   #+begin_src emacs-lisp
     (use-package magit
       :bind
       ("C-x g" . magit-status)
       :config
       (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))

     (use-package git-timemachine)
   #+end_src

** Move Text

   [[https://github.com/emacsfodder/move-text][Github Source]]
   #+begin_src emacs-lisp
     (use-package move-text
       :bind
       (("M-p" . move-text-up)
        ("M-n" . move-text-down))
       :config
       (move-text-default-bindings))
   #+end_src

** Parentheses Look/Nav Improvements
*** Smartparens

    [[https://github.com/Fuco1/smartparens][Github Source]]
    [[https://ebzzry.io/en/emacs-pairs/][Useful Smartparens Funcs/Keybinds to look at]]
    #+begin_src emacs-lisp
      (use-package smartparens
        :init
        (smartparens-mode)
        :diminish "SP"
        :bind
        ("C-M-a" . sp-beginning-of-sexp)
        ("C-M-e" . sp-end-of-sexp)
        ("C-M-f" . sp-forward-sexp)
        ("C-M-b" . sp-backward-sexp)
        :config
        (smartparens-global-mode t)
        (smartparens-strict-mode))
    #+end_src

*** Raibow Parentheses

    [[https://github.com/Fanael/rainbow-delimiters][Github Source]]
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
        :defer t
        :init
        (rainbow-delimiters-mode)
        :diminish
        )
    #+end_src

** Perspective

   [[https://github.com/nex3/perspective-el][Github Source]]

** Pdf Reader

   [[https://github.com/politza/pdf-tools][Github Source]]
   Dependencies:
   libpng-dev zlib1g-dev libpoppler-glib-dev libpoppler-private-dev
   Optional:
   sudo apt install imagemagick

   #+begin_src emacs-lisp
     (use-package pdf-tools
       :defer t)
   #+end_src

** Projectile

   [[https://projectile.mx/][Projectile Website]]
   #+begin_src emacs-lisp
     (use-package projectile
       :init
       (projectile-global-mode)
       :bind
       ("C-c p" . projectile-command-map)
       :config
       (setq-default projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
                     projectile-known-projects-file (expand-file-name ".projectile-bookmarks" user-emacs-directory)))

     (use-package counsel-projectile
       :init
       (counsel-projectile-mode))
   #+end_src

** Recent Files

   [[https://www.emacswiki.org/emacs/RecentFiles][Recentf Emacs Wiki]]
   #+begin_src emacs-lisp
     (use-package recentf
       :defer t
       :init
       (recentf-mode)
       :diminish
       :config
       (setq recentf-save-file (concat user-emacs-directory "recentf")
             recentf-max-saved-items 100
             recentf-exclude
             '("COMMIT_MSG" "COMMIT_EDITMSG" "/tmp/" "/ssh:" "/elpa")))
   #+end_src

** Syntax checking

   [[https://www.flycheck.org/en/latest/][Flycheck Website]]
   #+begin_src emacs-lisp
     (use-package flycheck
       :defer t
       :init
       (global-flycheck-mode)
       :diminish "FlyC"
       :custom
       (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
       (flycheck-display-errors-delay .3)
       :config
       (setq-default flycheck-gcc-openmp t)
       (setq flycheck-display-errors-function nil))
   #+end_src

** ShortcutS H3lP3R

   [[https://github.com/justbur/emacs-which-key][Github Source]]
   #+begin_src emacs-lisp
     (use-package which-key
       :defer t
       :init
       (which-key-mode)
       :diminish
       :config
       (setq which-key-show-early-on-C-h t
             which-key-idle-delay most-positive-fixnum
             which-key-idle-secondary-delay 1e-100))
   #+end_src

** Shackle

   [[https://depp.brause.cc/shackle/][Shackle Source Website]]
   [[https://github.com/sk8ingdom/.emacs.d/blob/master/general-config/general-plugins.el][Solution Savior (Github Source)!!]]
   Function that needs a rework defined here -> [[*Org]]
   #+begin_src emacs-lisp
     (use-package shackle
       :defer t
       :config
       (setq shackle-default-rule nil)
       (setq
        shackle-rules
        '(;; Built-in
          (compilation-mode                   :align below :ratio 0.20)
          ;;("*Calendar*"                       :align below :ratio 10    :select t)
          (" *Deletions*"                     :align below)
          ("*Occur*"                          :align below :ratio 0.20)
          ("*Completions*"                    :align below :ratio 0.20)
          ("*Help*"                           :align below :ratio 0.33  :select t)
          (" *Metahelp*"                      :align below :ratio 0.20  :select t)
          ("*Messages*"                       :align below :ratio 0.20  :select t)
          ("*Warning*"                        :align below :ratio 0.20  :select t)
          ("*Warnings*"                       :align below :ratio 0.20  :select t)
          ("*Backtrace*"                      :align below :ratio 0.20  :select t)
          ("*Compile-Log*"                    :align below :ratio 0.20)
          ("*package update results*"         :align below :ratio 0.20)
          ("*Ediff Control Panel*"            :align below              :select t)
          ("*tex-shell*"                      :align below :ratio 0.20  :select t)
          ("*Dired Log*"                      :align below :ratio 0.20  :select t)
          ("*Register Preview*"               :align below              :select t)
          ("*Process List*"                   :align below :ratio 0.20  :select t)

          ;; Magit
          ("*magit-commit-popup*"             :align below              :select t)
          ("*magit-dispatch-popup*"           :align below              :select t)

          ;; Plugins
          ;; (" *undo-tree*"                     :align right :ratio 0.10  :select t)
          ;; (" *command-log*"                   :align right :ratio 0.20)

          ;; Org-mode
          (" *Org todo*"                      :align below :ratio 10    :select t)
          ("*Org Note*"                       :align below :ratio 10    :select t)
          ("CAPTURE.*"              :regexp t :align below :ratio 20)
          ("*Org Select*"                     :align below :ratio 20)
          ("*Org Links*"                      :align below :ratio 10)
          (" *Agenda Commands*"               :align below)
          ("*Org Clock*"                      :align below)
          ("*Edit Formulas*"                  :align below :ratio 10    :select t)
          ("\\*Org Src.*"           :regexp t :align below :ratio 30    :select t)
          ("*Org Attach*"                     :align below              :select t)
          ("*Org Export Dispatcher*"          :align below              :select t)
          ("*Select Link*"                    :align below              :select t)

          ;; PDF Tools
          ("*PDF-Occur*"                      :align below :ratio 0.20  :select t)
          ("\\*Edit Annotation.*\\*":regexp t :align below :ratio 0.10  :select t)
          ("*Contents*"                       :align below :ratio 0.10)
          ("\\*.* annots\\*"        :regexp t :align below :ratio 0.20  :select t)
          ))
       (shackle-mode t))
   #+end_src

** Treemacs

   [[https://github.com/Alexander-Miller/treemacs][Github Source]]
   #+begin_src emacs-lisp
     (use-package treemacs
       :defer t
       :init
       (with-eval-after-load 'winum
         (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       :config
       (progn
         (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
               treemacs-deferred-git-apply-delay      0.5
               treemacs-directory-name-transformer    #'identity
               treemacs-display-in-side-window        t
               treemacs-eldoc-display                 t
               treemacs-file-event-delay              5000
               treemacs-file-extension-regex          treemacs-last-period-regex-value
               treemacs-file-follow-delay             0.2
               treemacs-file-name-transformer         #'identity
               treemacs-follow-after-init             t
               treemacs-git-command-pipe              ""
               treemacs-goto-tag-strategy             'refetch-index
               treemacs-indentation                   2
               treemacs-indentation-string            " "
               treemacs-is-never-other-window         nil
               treemacs-max-git-entries               5000
               treemacs-missing-project-action        'ask
               treemacs-move-forward-on-expand        nil
               treemacs-no-png-images                 nil
               treemacs-no-delete-other-windows       t
               treemacs-project-follow-cleanup        nil
               treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
               treemacs-position                      'left
               treemacs-recenter-distance             0.1
               treemacs-recenter-after-file-follow    nil
               treemacs-recenter-after-tag-follow     nil
               treemacs-recenter-after-project-jump   'always
               treemacs-recenter-after-project-expand 'on-distance
               treemacs-show-cursor                   nil
               treemacs-show-hidden-files             t
               treemacs-silent-filewatch              nil
               treemacs-silent-refresh                nil
               treemacs-sorting                       'alphabetic-asc
               treemacs-space-between-root-nodes      t
               treemacs-tag-follow-cleanup            t
               treemacs-tag-follow-delay              1.5
               treemacs-user-mode-line-format         nil
               treemacs-user-header-line-format       nil
               treemacs-width                         35
               treemacs-workspace-switch-cleanup      nil)

         (treemacs-follow-mode t)
         (treemacs-filewatch-mode t)
         (treemacs-fringe-indicator-mode t)
         (pcase (cons (not (null (executable-find "git")))
                      (not (null treemacs-python-executable)))
           (`(t . t)
            (treemacs-git-mode 'deferred))
           (`(t . _)
            (treemacs-git-mode 'simple))))
       :bind
       (:map global-map
             ("M-0"       . treemacs-select-window)
             ("C-c t 1"   . treemacs-delete-other-windows)
             ("C-c t t"   . treemacs)
             ("C-c t B"   . treemacs-bookmark)
             ("C-c t C-t" . treemacs-find-file)
             ("C-c t M-t" . treemacs-find-tag)))

     (use-package treemacs-projectile
       :defer t
       :after treemacs projectile)

     (use-package treemacs-magit
       :defer t
       :after treemacs magit)
   #+end_src

** Whitespace

   [[http://ergoemacs.org/emacs/whitespace-mode.html]]
   #+begin_src emacs-lisp
     (require 'whitespace)
     ;;(global-whitespace-mode +1)

     (progn
       (setq whitespace-style (quote (face tabs newline tab-mark newline-mark )))
       (setq whitespace-display-mappings
             '((space-mark 32 [183] [46])
               (newline-mark 10 [182 10])
               (tab-mark 9 [9655 9] [92 9]))))
   #+end_src


* Language Server Protocol

  [[https://emacs-lsp.github.io/lsp-mode/][LSP Website]]
** LSP Mode
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :preface
       (defun me/lsp-optimize ()
         (setq-local
          gc-cons-threshold (* 100 1024 1024)
          read-process-output-max (* 1024 1024)))
       :hook
       (lsp-mode . me/lsp-optimize)
       (lsp-mode . lsp-enable-which-key-integration)
       :bind
       ("C-c l" . lsp-keymap-prefix)
       :custom
       ;; (lsp-auto-guess-root t)
       (lsp-idle-delay .01)
       (lsp-diagnostics-provider :none)
       (lsp-eldoc-hook nil)
       (lsp-session-file (expand-file-name ".lsp" user-emacs-directory))
       :config
       (setq lsp-eslint-server-command insanya/eslint-path))
   #+end_src

** LSP Ui
  #+begin_src emacs-lisp
    (use-package lsp-ui
      :defer t
      :custom
      (lsp-ui-doc-enable nil)
      (lsp-ui-doc-delay .1)
      (lsp-ui-doc-header nil)
      (lsp-ui-doc-max-height 16)
      (lsp-ui-doc-max-width 80)
      (lsp-ui-doc-position 'top)
      (lsp-ui-imenu-enable nil)
      (lsp-ui-peek-enable nil)
      (lsp-ui-sideline-enable nil))
   #+end_src

** LSP Treemacs and DAP Mode

   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :defer t
       :init
       (lsp-treemacs-sync-mode))
   #+end_src

** DAP Mode

   [[https://emacs-lsp.github.io/dap-mode/][DAP Website]]
   #+begin_src emacs-lisp
     (use-package dap-mode
       :defer t
       :init
       (dap-mode)
       (dap-ui-mode))
  #+end_src


* Languages
** JavaScript
*** Skewer

    [[https://github.com/skeeto/skewer-mode][Github Source]]
    #+begin_src emacs-lisp
      (use-package simple-httpd
        :defer t)
      (use-package skewer-mode
        :defer t
        :diminish "Skewer")
    #+end_src

*** JS Mode

   [[https://github.com/mooz/js2-mode][Github Source]]
   [[https://github.com/mooz/js2-mode/blob/bb73461c2c7048d811b38e6b533a30fb5fdcea93/js2-mode.el#L57][Important Fix]]
   #+begin_src emacs-lisp
     (use-package js2-mode
       :hook
       (js-mode . js2-minor-mode)
       (js-mode . lsp)
       (js-mode . whitespace-mode)
       (js-mode . skewer-mode)
       :interpreter
       (("node" . js2-mode))
       :custom
       (js-indent-level 2)
       (js-switch-indent-offset 2)
       (js2-highlight-level 3)
       (js2-idle-timer-delay 0))

     (use-package js2-refactor
       :diminish
       :commands
       js2-refactor-mode
       :hook
       (jss-mode . js2-refactor-mode)
       :config
       (js2r-add-keybindings-with-prefix "C-c C-m"))
   #+end_src

** Json

   [[https://github.com/joshwnj/json-mode][Github Source]]
   #+begin_src emacs-lisp
     (use-package json-mode
       :mode "\\.json\\'")
   #+end_src

** Vue

   [[https://github.com/AdamNiederer/vue-mode][Github Source]]
   #+begin_src emacs-lisp
     (use-package vue-mode
       :mode "\\.vue\\'"
       :hook
       (vue-mode . lsp))
   #+end_src

** Web Mode
*** HTML

   [[https://web-mode.org/][Web Mode Website]]
   #+begin_src emacs-lisp
     (use-package web-mode
       :mode ("\\.html?\\'")
       :hook
       (web-mode . emmet-mode)
       (web-mode . whitespace-mode)
       ;;(web-mode . skewer-html-mode)
       :custom
       (web-mode-code-indent-offset 2)
       (web-mode-css-indent-offset 2)
       (web-mode-markup-indent-offset 2)
       (web-mode-enable-auto-quoting nil)
       (web-mode-enable-auto-indentation nil))
   #+end_src

*** CSS

    #+begin_src emacs-lisp
      (use-package css-mode
        :hook
        (css-mode . skewer-css-mode)
        (css-mode . whitespace-mode)
        :custom
        (css-indent-offset 2))
    #+end_src


* Org
** Mode

   [[https://orgmode.org/][OrG Mode]]
   #+begin_src emacs-lisp
     (use-package org
       :bind
       (("C-c o c" . org-capture)
        ("C-c o a" . org-agenda))
       :config
       (setq org-src-fontify-natively t
             org-confirm-babel-evaluate nil
             org-src-tab-acts-natively t)

       (setq org-todo-keywords
             '((sequence
                "TODO(t)" "NEXT(n)" "STARTED(s)" "WAIT(w)" "|" "DONE(d)")))

       (setq org-todo-keyword-faces
             '(("TODO" . "#dfaf8f")
               ("NEXT" . "#93e0e3")
               ("STARTED" . "#dc8cc3")
               ("WAIT" . "#CC9393")
               ("DONE" . "#dcdccc")))

       (setq org-default-notes-file "~/Desktop/dailydose/notes.org"))

     ;; (setq org-agenda-files '("~/Desktop/dailydose"))

     ;; Re-define org-switch-to-buffer-other-window to NOT use org-no-popups.
     ;; Primarily for compatibility with shackle.
     (defun org-switch-to-buffer-other-window (args)
       "Switch to buffer in a second window on the current frame.
     In particular, do not allow pop-up frames.
     Returns the newly created buffer.
     Redefined to allow pop-up windows."
       ;; (org-no-popups
       ;;   (apply 'switch-to-buffer-other-window args))
       (switch-to-buffer-other-window args))
   #+end_src

** Bullets

   [[https://github.com/sabof/org-bullets][Github Source]]
   #+begin_src emacs-lisp
     (use-package org-bullets
       :hook
       (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("●" "►" "▸")))
   #+end_src


