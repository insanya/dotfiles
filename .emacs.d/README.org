#+TITLE: GNU EMACS 27.1 Configuration
#+AUTHOR: Lucas Pereira <insanya@protonmail.com>
#+STARTUP: content

* Core

** Funtions

   #+begin_src emacs-lisp

     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (tooltip-mode 0)
     (show-paren-mode 1)
     (blink-cursor-mode -1)
     (delete-selection-mode 1)
     (scroll-bar-mode 0)
     (fset 'yes-or-no-p 'y-or-n-p)
     (set-default-coding-systems 'utf-8)

     ;; revert buffers automatically when underlying files are changed externally
     (global-auto-revert-mode t)

   #+end_src

** Setq's

   #+begin_src emacs-lisp

     (setq ring-bell-function 'ignore)
     (setq inhibit-startup-screen t)
     (setq confirm-kill-emacs 'yes-or-no-p)
     (setq mouse-yank-at-point t)
     (setq select-enable-clipboard t)

     (setq show-help-function nil)
     (setq help-window-select t)

     (setq scroll-margin 0
	   redisplay-dont-pause t
	   scroll-margin 1
	   scroll-step 1
	   scroll-conservatively 100000
	   scroll-preserve-screen-position 1)

     (setq vc-follow-symlinks t)
     (setq auto-save-default nil)
     (setq make-backup-files nil)

     (setq indent-tabs-mode nil)
     (setq tab-width 2)

     ;; Reuse windows
     (setq display-buffer-alist
	   '((".*" (display-buffer-reuse-window display-buffer-same-window))))
     (setq display-buffer-reuse-frames t)
     (setq even-window-sizes nil)
     (setq cursor-in-non-selected-windows t)

   #+end_src

** Theme

   #+begin_src emacs-lisp

     (use-package all-the-icons)
     (use-package gruvbox-theme :init (load-theme 'gruvbox-dark-medium t))

     ;;(use-package powerline :init (powerline-default-theme))

     (use-package telephone-line
       :after
       (workgroups2)
       :init
       (telephone-line-mode 1)
       :custom
       (telephone-line-lhs
	'((accent . (telephone-line-vc-segment
		     telephone-line-erc-modified-channels-segment
		     telephone-line-process-segment))
	  (nil    . (telephone-line-workgroups2-segment
		     telephone-line-minor-mode-segment
		     telephone-line-buffer-segment))))
       (telephone-line-rhs
	'((nil    . (telephone-line-misc-info-segment))
	  (accent . (telephone-line-major-mode-segment))
	  (evil   . (telephone-line-airline-position-segment)))))

     #+end_src

** Font

   #+begin_src emacs-lisp
     (defun insanya/get-default-font ()
       (eq system-type 'gnu/linux) "Ubuntu Mono-13.5")
     (add-to-list 'default-frame-alist `(font . ,(insanya/get-default-font)))
     (when (display-graphic-p)
       (set-face-attribute 'fixed-pitch nil :font (insanya/get-default-font)))
   #+end_src

** Exec Path From Shell

   #+begin_src emacs-lisp

     (use-package exec-path-from-shell :init (exec-path-from-shell-initialize))

   #+end_src

** Line Numbers

   #+begin_src emacs-lisp

     (use-package nlinum :config (global-nlinum-mode +1))
     (use-package nlinum-hl)

   #+end_src


** Diminish

   #+begin_src emacs-lisp

     (use-package diminish)

   #+end_src

** Which-Key

   #+begin_src emacs-lisp
     (use-package which-key
       :diminish
       :init
       (which-key-mode)
       :custom
       (which-key-show-early-on-C-h t)
       (which-key-idle-delay most-positive-fixnum)
       (which-key-idle-secondary-delay 1e-100))
   #+end_src

** Whitespace

   #+begin_src emacs-lisp

     (require 'whitespace)
     ;; (global-whitespace-mode +1)
     (diminish 'global-whitespace-mode)
     (setq whitespace-line-column 80)

     (progn
       (setq whitespace-style (quote (face spaces tabs newline-mark tab-mark)))
       (setq whitespace-display-mappings
	     '((space-mark 32 [183] [46])
	       (tab-mark 9 [9655 9] [92 9]))))

   #+end_src



** Company

   #+begin_src emacs-lisp

     (use-package company
       :diminish
       :hook
       (after-init . global-company-mode)
       :bind
       (:map company-active-map
	     ("RET" . nil) ([return] . nil)
	     ("TAB" . company-complete-selection) ([tab] . company-complete-selection))
       :custom
       (company-idle-delay 0)
       (company-minimum-prefix-length 3)
       (company-selection-wrap-around t)
       (company-dabbrev-downcase nil)
       (company-require-match nil)
       (company-tooltip-align-annotations t)
       (company-box-doc-enable nil))

     (use-package company-box
       :diminish
       :hook
       (company-mode . company-box-mode))

   #+end_src

** Crux

   [[https://github.com/bbatsov/crux][Crux Github Source]]
   #+begin_src emacs-lisp
     (use-package crux
       :bind
       ("C-a" . crux-move-beginning-of-line)
       ("C-k" . crux-smart-kill-line)
       ("C-c c d" . crux-duplicate-current-line-or-region)
       ("C-c c D" . crux-delete-file-and-buffer)
       ("C-c c f" . crux-recentf-find-file)
       ("C-c c r" . crux-rename-file-and-buffer)
       ("C-c c k" . crux-kill-other-buffers)
       ("C-c c c" . crux-cleanup-buffer-or-region))
   #+end_src

** Expand
*** Emmet Mode

    [[https://emmet.io/][Emmet Website]]
    #+begin_src emacs-lisp
      (use-package emmet-mode
	:bind
	(:map
	 emmet-mode-keymap
	 ("<C-return>" . nil))
	:custom
	(emmet-insert-flash-time .1)
	(emmet-move-cursor-between-quote t))
    #+end_src

*** Region

    #+begin_src emacs-lisp
      (use-package expand-region
	:bind
	("C-=" . er/expand-region))
    #+end_src

*** YaSnippets

    #+begin_src emacs-lisp
      (use-package yasnippet
	:diminish
	:init
	(yas-global-mode)
	:config
	(diminish 'yas-minor-mode))

      (use-package yasnippet-snippets
	:diminish)
    #+end_src

** FlyCheck

   [[https://www.flycheck.org/en/latest/][Flycheck Website]]
   #+begin_src emacs-lisp

     (use-package flycheck
       :diminish
       :init
       (global-flycheck-mode)
       :custom
       (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
       (flycheck-display-errors-delay 0)
       (flycheck-gcc-openmp t)
       (flycheck-display-errors-function t))

   #+end_src

** IBuffer

   [[https://github.com/purcell/ibuffer-projectile][Github Source 1]]
   [[https://github.com/purcell/ibuffer-vc][Github Source 2]]
   #+begin_src emacs-lisp
     (use-package ibuffer-vc)

     (use-package ibuffer-projectile
       :preface
       (defun ibuffer-set-up-preferred-filters ()
	 (ibuffer-vc-set-filter-groups-by-vc-root)
	 (unless (eq ibuffer-sorting-mode 'filename/process)
	   (ibuffer-do-sort-by-filename/process)))
       :hook
       (ibuffer . ibuffer-set-up-preferred-filters)
       :bind
       ("C-x C-b" . ibuffer)
       :custom
       (ibuffer-show-empty-filter-groups nil))
   #+end_src

** Indentation

   #+begin_src emacs-lisp

     (use-package aggressive-indent
       :diminish
       :init
       (global-aggressive-indent-mode +1))

   #+end_src

** Magit

   [[https://magit.vc/][Magit Website]]
   #+begin_src emacs-lisp

     (use-package magit
       :bind
       ("C-x g" . magit-status)
       :custom
       (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))

     (use-package git-timemachine)

     (use-package diff-hl
       :init
       (global-diff-hl-mode))

   #+end_src

** Parentheses
*** Rainbow

    #+begin_src emacs-lisp

      (use-package rainbow-delimiters
	:diminish
	:hook
	(prog-mode . rainbow-delimiters-mode))

    #+end_src

*** Smartparens

    [[https://ebzzry.io/en/emacs-pairs/][Useful Smartparens Funcs/Keybind]]
    #+begin_src emacs-lisp

      (use-package smartparens
	:diminish
	:init
	(smartparens-mode)
	(smartparens-global-mode t)
	:bind
	("C-M-a" . sp-beginning-of-sexp)
	("C-M-e" . sp-end-of-sexp)
	("C-M-b" . sp-backward-sexp)
	("C-M-f" . sp-forward-sexp)
	("C-M-n" . sp-next-sexp)
	("C-M-p" . sp-previous-sexp)
	("M-<backspace>" . backward-kill-word)
	("C-<backspace>" . sp-backward-kill-word)
	([remap sp-backward-kill-word] . backward-kill-word))

    #+end_src

** Pdf Reader

   [[https://github.com/politza/pdf-tools][Github Source]]
   Dependencies:
   libpng-dev zlib1g-dev libpoppler-glib-dev libpoppler-private-dev
   Optional:
   sudo apt install imagemagick

   #+begin_src emacs-lisp

     (use-package pdf-tools)

   #+end_src

** Projectile

   [[https://projectile.mx/][Projectile Website]]
   #+begin_src emacs-lisp

     (use-package projectile
       :init
       (projectile-global-mode)
       :bind
       ("C-c p" . projectile-command-map)
       :config
       (setq-default projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
		     projectile-known-projects-file (expand-file-name ".projectile-bookmarks" user-emacs-directory)))

   #+end_src

** Recent Files

   [[https://www.emacswiki.org/emacs/RecentFiles][Recentf Emacs Wiki]]
   #+begin_src emacs-lisp

     (use-package recentf
       :init
       (recentf-mode)
       :diminish
       :config
       (setq recentf-save-file (concat user-emacs-directory "recentf")
	     recentf-max-saved-items 100
	     recentf-exclude
	     '("COMMIT_MSG" "COMMIT_EDITMSG" "/tmp/" "/ssh:" "/elpa")))

   #+end_src

** Selectrum

   [[https://github.com/raxod502/selectrum][Github Source]]
   #+begin_src emacs-lisp

     (use-package selectrum
       :init
       (selectrum-mode))

     (use-package selectrum-prescient
       :init
       (selectrum-prescient-mode)
       (prescient-persist-mode))

   #+end_src

** Search Buffer

   [[https://github.com/raxod502/ctrlf][Github Source]]
   #+begin_src emacs-lisp
     (use-package ctrlf
       :init
       (ctrlf-mode))
   #+end_src

** Shackle

   [[https://depp.brause.cc/shackle/][Shackle Source Website]]
   [[https://github.com/sk8ingdom/.emacs.d/blob/master/general-config/general-plugins.el][Solution Savior (Github Source)!!]]
   Function that needs a rework defined here [[Org]]
   #+begin_src emacs-lisp

     (use-package shackle
       :init
       (shackle-mode)
       :config
       (setq shackle-default-rule nil)
       (setq
	shackle-rules
	'(;; Built-in
	  (compilation-mode                   :align below :ratio 0.20)
	  ;;("*Calendar*"                       :align below :ratio 10    :select t)
	  (" *Deletions*"                     :align below)
	  ("*Occur*"                          :align below :ratio 0.20)
	  ("*Completions*"                    :align below :ratio 0.20)
	  ("*Help*"                           :align below :ratio 0.33  :select t)
	  (" *Metahelp*"                      :align below :ratio 0.20  :select t)
	  ("*Messages*"                       :align below :ratio 0.20  :select t)
	  ("*Warning*"                        :align below :ratio 0.20  :select t)
	  ("*Warnings*"                       :align below :ratio 0.20  :select t)
	  ("*Backtrace*"                      :align below :ratio 0.20  :select t)
	  ("*Compile-Log*"                    :align below :ratio 0.20)
	  ("*package update results*"         :align below :ratio 0.20)
	  ("*Ediff Control Panel*"            :align below              :select t)
	  ("*tex-shell*"                      :align below :ratio 0.20  :select t)
	  ("*Dired Log*"                      :align below :ratio 0.20  :select t)
	  ("*Register Preview*"               :align below              :select t)
	  ("*Process List*"                   :align below :ratio 0.20  :select t)
	  ;; Terminal

	  ;; Magit
	  ("*magit-commit-popup*"             :align below              :select t)
	  ("*magit-dispatch-popup*"           :align below              :select t)
	  ;; Plugins
	  ;; (" *undo-tree*"                     :align right :ratio 0.10  :select t)
	  ;; (" *command-log*"                   :align right :ratio 0.20)
	  ;; Org-mode
	  (" *Org todo*"                      :align below :ratio 10    :select t)
	  ("*Org Note*"                       :align below :ratio 10    :select t)
	  ("CAPTURE.*"              :regexp t :align below :ratio 20)
	  ("*Org Select*"                     :align below :ratio 20)
	  ("*Org Links*"                      :align below :ratio 10)
	  (" *Agenda Commands*"               :align below)
	  ("*Org Clock*"                      :align below)
	  ("*Edit Formulas*"                  :align below :ratio 10    :select t)
	  ("\\*Org Src.*"           :regexp t :align below :ratio 30    :select t)
	  ("*Org Attach*"                     :align below              :select t)
	  ("*Org Export Dispatcher*"          :align below              :select t)
	  ("*Select Link*"                    :align below              :select t)
	  ;; PDF Tools
	  ("*PDF-Occur*"                      :align below :ratio 0.20  :select t)
	  ("\\*Edit Annotation.*\\*":regexp t :align below :ratio 0.10  :select t)
	  ("*Contents*"                       :align below :ratio 0.10)
	  ("\\*.* annots\\*"        :regexp t :align below :ratio 0.20  :select t))))

   #+end_src

** Switch Window

   [[https://github.com/dimitri/switch-window][Github Source]]
   #+begin_src emacs-lisp

     (use-package switch-window
       :bind
       ("C-x o" . switch-window)
       ("C-x 1" . switch-window-then-maximize)
       ("C-x 2" . switch-window-then-split-below)
       ("C-x 3" . switch-window-then-split-right)
       ("C-x 0" . switch-window-then-delete)
       ("C-x 4 d" . switch-window-then-dired)
       ("C-x 4 f" . switch-window-then-find-file)
       ("C-x 4 r" . switch-window-then-find-file-read-only)
       :custom
       (switch-window-shortcut-style 'alphabet)
       (switch-window-timeout nil))

   #+end_src

** Treemacs

   [[https://github.com/Alexander-Miller/treemacs][Github Source]]
   #+begin_src emacs-lisp

     (use-package treemacs
       :init
       (with-eval-after-load 'winum
	 (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       (defvar treemacs-no-load-time-warnings t)
       :config
       (progn
	 (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	       treemacs-deferred-git-apply-delay      0.5
	       treemacs-directory-name-transformer    #'identity
	       treemacs-display-in-side-window        t
	       treemacs-eldoc-display                 t
	       treemacs-file-event-delay              5000
	       treemacs-file-extension-regex          treemacs-last-period-regex-value
	       treemacs-file-follow-delay             0.2
	       treemacs-file-name-transformer         #'identity
	       treemacs-follow-after-init             t
	       treemacs-git-command-pipe              ""
	       treemacs-goto-tag-strategy             'refetch-index
	       treemacs-indentation                   2
	       treemacs-indentation-string            " "
	       treemacs-is-never-other-window         nil
	       treemacs-max-git-entries               5000
	       treemacs-missing-project-action        'ask
	       treemacs-move-forward-on-expand        nil
	       treemacs-no-png-images                 nil
	       treemacs-no-delete-other-windows       t
	       treemacs-project-follow-cleanup        nil
	       treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	       treemacs-position                      'left
	       treemacs-recenter-distance             0.1
	       treemacs-recenter-after-file-follow    nil
	       treemacs-recenter-after-tag-follow     nil
	       treemacs-recenter-after-project-jump   'always
	       treemacs-recenter-after-project-expand 'on-distance
	       treemacs-show-cursor                   nil
	       treemacs-show-hidden-files             t
	       treemacs-silent-filewatch              nil
	       treemacs-silent-refresh                nil
	       treemacs-sorting                       'alphabetic-asc
	       treemacs-space-between-root-nodes      t
	       treemacs-tag-follow-cleanup            t
	       treemacs-tag-follow-delay              1.5
	       treemacs-user-mode-line-format         nil
	       treemacs-user-header-line-format       nil
	       treemacs-width                         35
	       treemacs-workspace-switch-cleanup      nil)

	 (treemacs-follow-mode t)
	 (treemacs-filewatch-mode t)
	 (treemacs-fringe-indicator-mode t)
	 (pcase (cons (not (null (executable-find "git")))
		      (not (null treemacs-python-executable)))
	   (`(t . t)
	    (treemacs-git-mode 'deferred))
	   (`(t . _)
	    (treemacs-git-mode 'simple))))
       :bind
       (:map global-map
	     ("M-0"       . treemacs-select-window)
	     ("C-c t 1"   . treemacs-delete-other-windows)
	     ("C-c t t"   . treemacs)
	     ("C-c t B"   . treemacs-bookmark)
	     ("C-c t C-t" . treemacs-find-file)
	     ("C-c t M-t" . treemacs-find-tag)))

     (use-package treemacs-projectile
       :defer t
       :after treemacs projectile)

     (use-package treemacs-magit
       :defer t
       :after treemacs magit)

   #+end_src


* Language Server Protocol

** LSP Mode
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :preface
       (defun me/lsp-optimize ()
	 (setq-local
	  gc-cons-threshold (* 100 1024 1024)
	  read-process-output-max (* 1024 1024)))
       :hook
       (lsp-mode . me/lsp-optimize)
       (lsp-mode . lsp-enable-which-key-integration)
       :commands
       lsp
       :bind
       ("C-c l" . lsp-keymap-prefix)
       :custom
       (lsp-eldoc-hook nil)
       (lsp-idle-delay .01)
       (lsp-auto-guess-root t)
       (lsp-diagnostics-provider :none)
       (lsp-eslint-server-command '("node" "/home/insanya/.nvm/versions/node/v15.2.0/bin/eslint" "--stdin"))
       (lsp-session-file (expand-file-name ".lsp" user-emacs-directory)))
   #+end_src

** LSP Ui
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :custom
       (lsp-ui-doc-enable nil)
       (lsp-ui-doc-delay .1)
       (lsp-ui-doc-header nil)
       (lsp-ui-doc-max-height 16)
       (lsp-ui-doc-max-width 80)
       (lsp-ui-doc-position 'top)
       (lsp-ui-imenu-enable nil)
       (lsp-ui-peek-enable nil)
       (lsp-ui-sideline-enable nil))
   #+end_src

** LSP Treemacs

   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :init
       (lsp-treemacs-sync-mode))
   #+end_src

** DAP Mode

   [[https://emacs-lsp.github.io/dap-mode/][DAP Website]]
   #+begin_src emacs-lisp
     (use-package dap-mode
       :init
       (dap-mode)
       (dap-ui-mode))
   #+end_src


* Languages

** Docker

   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :hook
       (dockerfile-mode . lsp))
   #+end_src

** JavaScript
*** Skewer

    [[https://github.com/skeeto/skewer-mode][Github Source]]
    #+begin_src emacs-lisp
      (use-package simple-httpd)

      (use-package skewer-mode
	:diminish "Skewer")
    #+end_src

*** JS Mode

    [[https://github.com/mooz/js2-mode][Github Source]]
    [[https://github.com/mooz/js2-mode/blob/bb73461c2c7048d811b38e6b533a30fb5fdcea93/js2-mode.el#L57][Important Fix]]
    #+begin_src emacs-lisp
      (use-package js2-mode
	:hook
	(js-mode . js2-minor-mode)
	(js-mode . lsp)
	(js-mode . whitespace-mode)
	(js-mode . skewer-mode)
	:interpreter "node"
	:custom
	(js-indent-level 2)
	(js-switch-indent-offset 2)
	(js2-highlight-level 3)
	(js2-idle-timer-delay 0))

      (use-package js2-refactor
	:diminish
	:hook
	(jss-mode . js2-refactor-mode)
	:commands js2-refactor-mode
	:config
	(js2r-add-keybindings-with-prefix "C-c C-m"))
    #+end_src

** Json

   [[https://github.com/joshwnj/json-mode][Github Source]]
   #+begin_src emacs-lisp
     (use-package json-mode
       :mode "\\.json\\'")
   #+end_src

** Vue

   [[https://github.com/AdamNiederer/vue-mode][Github Source]]
   #+begin_src emacs-lisp
     (use-package vue-mode
       :mode "\\.vue\\'"
       :hook
       (vue-mode . lsp))
   #+end_src

** Web Mode
*** HTML

    [[https://web-mode.org/][Web Mode Website]]
    #+begin_src emacs-lisp
      (use-package web-mode
	:mode ("\\.html?\\'")
	:hook
	(web-mode . emmet-mode)
	(web-mode . whitespace-mode)
	;;(web-mode . skewer-html-mode)
	:custom
	(web-mode-code-indent-offset 2)
	(web-mode-css-indent-offset 2)
	(web-mode-markup-indent-offset 2)
	(web-mode-enable-auto-quoting nil)
	(web-mode-enable-auto-indentation nil))
    #+end_src

*** CSS

    #+begin_src emacs-lisp
      (use-package css-mode
	:hook
	(css-mode . skewer-css-mode)
	(css-mode . whitespace-mode)
	:custom
	(css-indent-offset 2))
    #+end_src



* Org mode

** Main

   #+begin_src emacs-lisp

     (use-package org
       :bind
       (("C-c o a" . org-agenda)
	("C-c o c" . org-capture)
	("C-c o l" . org-store-link))
       :custom
       (org-directory "~/Desktop/insanya/org")

       (org-src-fontify-natively t)
       (org-src-tab-acts-natively t)
       (org-startup-with-inline-images t)
       (org-startup-folded 'content)
       (org-pretty-entities t)

       (org-agenda-files (list org-directory))
       (org-agenda-window-setup 'current-window)
       (org-agenda-time-grid '((daily today require-timed) () "......" ""))
       (org-agenda-skip-scheduled-if-done t)
       (org-agenda-skip-deadline-if-done t)
       (org-agenda-include-deadlines t)
       (org-agenda-block-separator nil)
       (org-agenda-compact-blocks t)
       (org-agenda-start-with-log-mode t)

       (org-todo-keywords '((sequence "TODO(t)" "WORKING(s)" "WAITING(w)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))

       (org-todo-keyword-faces '(
				 ("WORKING" . "purple")
				 ("WAITING" . "yellow")
				 ("MEETING" . "orange")
				 ("CANCELED" . "black")))

       (org-capture-templates
	'(
	  ("t" "Task" entry (file+headline "~/Desktop/insanya/org/sched.org" "Tasks")
	   "** TODO %?\n%T \n")
	  ("m" "Meeting" entry (file+headline "~/Desktop/insanya/org/sched.org" "Meetings")
	   "** MEETING %?\n%T \n")
	  ("p" "Personal" entry (file+headline "~/Desktop/insanya/org/sched.org" "Personal")
	   "** TODO %?\n%T \n :Personal:")
	  )
	)

       :config
       (defun org-switch-to-buffer-other-window (args)
	 (switch-to-buffer-other-window args)))

   #+end_src

** Super Agenda

   #+begin_src emacs-lisp

     (use-package org-super-agenda
       :diminish
       :init
       (org-super-agenda-mode t)
       :custom
       (org-agenda-custom-commands
	(list(quote
	      ("i" "Super Insanya View"
	       (
		(agenda "" ((org-agenda-span 'day)
			    (org-agenda-property-position 'where-it-fits)
			    (org-agenda-property-separator "|" )
			    (org-super-agenda-groups
			     '(
			       (:name "Today" :time-grid t :date today :todo "TODAY" :scheduled today :order 1)
			       (:name "Overdue" :deadline past :order 3)
			       (:name "Due Soon" :deadline future :order 4)))))

		(alltodo "Insa" ((org-agenda-overriding-header "")
				 (org-agenda-property-position 'where-it-fits)
				 (org-agenda-property-separator "|" )
				 (org-super-agenda-groups
				  '(
				    (:name "Working On" :todo "WORKING" :order 0)
				    (:name "Waiting" :todo "WAITING" :order 1)
				    (:name "Issues" :tag "Issue" :order 4)
				    (:name "Meetings" :todo "MEETING" :order 6)
				    (:name "Dissertation" :tag "THESIS" :order 8)
				    (:name "PEI" :tag "PEI" :order 10)
				    (:name "Overall" :todo "TODO" :order 12))))))
	       )))))

   #+end_src

** Bullets

   #+begin_src emacs-lisp

     (use-package org-bullets
       :diminish
       :hook
       (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("■" "◆" "▲" "▶")))

   #+end_src


* Workgroups2

** Mode
  #+begin_src emacs-lisp

    (use-package workgroups2
      :init
      (workgroups-mode 1)
      :custom
      (wg-prefix-key (kbd "C-c w"))
      (wg-session-file (concat user-emacs-directory ".emacs.workgroups2"))

      (wg-emacs-exit-save-behavior           'nil)
      (wg-workgroups-mode-exit-save-behavior 'nil)

      (wg-mode-line-display-on t)
      (wg-flag-modified t)
      (wg-mode-line-decor-left-brace "[")
      (wg-mode-line-decor-right-brace "]")
      (wg-mode-line-decor-divider ":"))

    (diminish 'workgroups-mode)

  #+end_src

